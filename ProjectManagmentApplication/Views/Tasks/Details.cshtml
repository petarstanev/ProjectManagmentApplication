@using ProjectManagementApplication.Helpers
@using ProjectManagementApplication.Models
@model ProjectManagementApplication.Models.Task

<div class="col-md-6">
    <h2>Task Details</h2>

    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.Title)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Title)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Description)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Description)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Deadline)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Deadline)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.CreatedBy)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.CreatedByUser.Name)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.AssignedTo)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.AssignedToUser.Name)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Column)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Column.Title)
        </dd>
    </dl>
    <div class="task-images">
        <h3>Images</h3>
        @if (Model.Images.Count == 0)
        {
            <p>No images found.</p>
        }
        @foreach (Image image in Model.Images)
        {
            <div class="task-image-container text-center col-md-10">
                <a href="@image.Url" data-lightbox="task-set">
                    <img id="@image.ImageId" class="img-responsive" data-lightbox="image-@image.ImageId" src="@image.Url">
                </a>
                @Html.ActionLink("Remove image", "Delete", "Images", new { id = image.ImageId }, new { @class = "" })
            </div>
        }
    </div>
    <div class="col-md-10">
        @Html.ActionLink("Add image", "Upload", "Images", new { id = Model.TaskId }, null)
        <br />
        @Html.ActionLink("Edit task", "Edit", new { id = Model.TaskId })
        <br />
        @Html.ActionLink("Back to Board", "Details", "Boards", new { id = Model.Column.BoardId }, null)
        <div id="favorite-container"></div>
        <input id="board-id" type="hidden" value="@Model.Column.BoardId" />
    </div>
</div>
<div class="col-sm-6">
    <h3>Comments</h3>
    @foreach (Comment comment in Model.Comments)
    {
        <div class="panel panel-default">
            <div class="panel-heading">
                <strong>@comment.Author.Name</strong> <span class="text-muted">commented @TimeHelper.TimeAgo(comment.CreatedDate)</span>
            </div>
            <div class="panel-body">
                @comment.Content
            </div>
            @if (@User.Identity.Name == comment.UserId.ToString())
            {
                <div class="panel-footer">
                    @Html.ActionLink("Edit comment", "Edit", "Comments", new { id = comment.CommentId }, null)
                    @Html.ActionLink("Delete comment", "Delete", "Comments", new { id = comment.CommentId }, null)
                </div>
            }
        </div>
    }
    @Html.ActionLink("Add Comment", "Create", "Comments", new { taskId = Model.TaskId }, null)
</div>


@section scripts {
    <script type="text/javascript">
        $(document)
            .ready(function () {
                var boardId = parseInt($("#board-id").val());
                getFavoriteStatus();

                $("#favorite-container")
                    .click(function () {
                        if ($("#favorite-container").text() === "Favorite") {
                            removeFromFavorite();
                        } else {
                            addToFavorite();
                        }
                    });
          

                function getFavoriteStatus() {
                    $.ajax({
                        url: "/Favorites/IsFavorite",
                        type: "GET",
                        data: { boardId: boardId },
                        dataType: 'JSON',
                        success: function (data) {
                            if (data.favourite) {
                                $("#favorite-container").text("Favorite");
                            } else {
                                $("#favorite-container").text("Not Favorite");
                            }

                            return data;
                        }
                    });
                }
                function addToFavorite() {
                    $.ajax({
                        url: "/Favorites/AddToFavorite",
                        type: "POST",
                        data: {
                            boardId: boardId
                        }
                    }).done(function () {
                        getFavoriteStatus();
                    });
                }
                function removeFromFavorite() {
                    $.ajax({
                        url: "/Favorites/RemoveFromFavorite",
                        type: "POST",
                        data: {
                            boardId: boardId
                        }
                    }).done(function () {
                        getFavoriteStatus();
                    });
                }

            });
    </script>
}
